# Generated by Abstract Agent
# Timestamp: 2025-08-13T00:13:50.248Z
# ---

fileStructure: |-
  feature-root.abs
  ├── core-wallet.abs
  │   ├── base-client.abs
  │   ├── keypair-client.abs
  │   ├── publickey-client.abs
  │   └── factory.abs
  └── plugin-integration.abs
      ├── hedera-wallet-service.abs
      └── hedera-wallet-plugin.abs
files:
  - fileName: feature-root.abs
    parentFile: ""
    content: |-
      # Hedera Wallet Feature

      ## 🎯 Purpose
      - To integrate Hedera blockchain capabilities into the SDK.
      - Enables querying balances, account info, and executing transfers.

      ## 🧩 Key Components
      - **Core Wallet Layer** <core-wallet.abs>
        - Provides fundamental classes for direct Hedera network interaction.
        - Manages connections, queries, and transaction signing.
      - **Plugin Integration Layer** <plugin-integration.abs>
        - Wraps core functions into user-friendly tools.
        - Exposes capabilities to agents and other SDK components.
  - fileName: core-wallet.abs
    parentFile: feature-root.abs
    content: |-
      # Core Wallet Layer

      ## 🎯 Purpose
      - To provide the fundamental components for Hedera network interaction.

      ## 🧩 Key Components
      - **Client Interface**
        - `HederaWalletClient` defines a standard contract for all wallets.
      - **Base Implementation** <base-client.abs>
        - An abstract class with shared, read-only logic.
        - Implements balance and account info queries.
      - **Specific Clients**
        - `KeypairClient`: A full-capability client for signing transactions. <keypair-client.abs>
        - `PublicKeyClient`: A read-only client for public data queries. <publickey-client.abs>
      - **Client Factory** <factory.abs>
        - Simplifies the creation of wallet client instances.
  - fileName: base-client.abs
    parentFile: core-wallet.abs
    content: |-
      # Base Hedera Wallet Client

      ## 🎯 Purpose
      - To provide shared, non-signing functionality for all Hedera clients.

      ## ⚙️ How it Works
      - **Initialization**
        - The constructor accepts a Hedera `accountId`.
      - **Client Creation**
        - `getClient` method creates a configured `@hashgraph/sdk` client.
        - It supports mainnet, testnet, and previewnet.
      - **Read-Only Operations**
        - Implements `getBalanceOfAccount` using `AccountBalanceQuery`.
        - Implements `getAccountInfoForAccount` using `AccountInfoQuery`.
        - Handles data conversion, like tinybars to HBAR.
      - **Abstract Methods**
        - Defines abstract methods like `signTransaction` and `transferHbar`.
        - These must be implemented by signing-capable subclasses like `<keypair-client.abs>`.
  - fileName: keypair-client.abs
    parentFile: core-wallet.abs
    content: |-
      # Keypair Client (Signing Wallet)

      ## 🎯 Purpose
      - To implement a full-capability wallet that signs transactions using a private key.

      ## ⚙️ How it Works
      - **Initialization**
        - Constructed with a private key.
        - Derives the public account ID if not provided.
      - **Transaction Sending Flow**
        - The `sendTransaction` method is the core of execution.
        - It gets a network client from the base class.
        - It sets the client's operator with its account ID and private key.
        - The Hedera SDK then automatically signs transactions upon execution.
        - It executes the transaction and waits for a success receipt.
      - **Transfer Logic**
        - Methods like `transferHbar` build a `TransferTransaction`.
        - They then call `sendTransaction` to execute it.
  - fileName: publickey-client.abs
    parentFile: core-wallet.abs
    content: |-
      # PublicKey Client (Read-Only Wallet)

      ## 🎯 Purpose
      - To implement a read-only wallet for public data queries.

      ## ⚙️ How it Works
      - **Inheritance**
        - Extends `<base-client.abs>`.
        - Inherits all read-only logic like getting balances and account info.
      - **Initialization**
        - Only requires a public `accountId` to be constructed.
      - **Signing Prevention**
        - Implements all methods defined as abstract in the base class.
        - These include `signTransaction`, `sendTransaction`, and `transferHbar`.
        - Each implementation immediately throws an error.
        - This enforces its read-only nature at runtime.
  - fileName: factory.abs
    parentFile: core-wallet.abs
    content: |-
      # Hedera Wallet Factory

      ## 🎯 Purpose
      - To provide simple, clear methods for creating Hedera wallet clients.

      ## 🧩 Key Components
      - **`fromPrivateKey` Method**
        - Creates a full-capability `<keypair-client.abs>`.
        - Takes a private key and an optional account ID.
      - **`fromAccountId` Method**
        - Creates a read-only `<publickey-client.abs>`.
        - Takes a public account ID.
      - **`canSign` Utility**
        - A type guard function.
        - Checks if a given client is an instance of `<keypair-client.abs>`.
        - It returns `false` for a `<publickey-client.abs>`.
        - Used by the `<hedera-wallet-plugin.abs>` to conditionally add tools.
  - fileName: plugin-integration.abs
    parentFile: feature-root.abs
    content: |-
      # Plugin Integration Layer

      ## 🎯 Purpose
      - To expose core Hedera wallet functions as standardized, agent-consumable tools.

      ## ⚙️ How it Works
      - **Service Layer** <hedera-wallet-service.abs>
        - A `HederaWalletService` wraps a core wallet client.
        - It contains the business logic for each tool.
      - **Plugin Layer** <hedera-wallet-plugin.abs>
        - A `HederaWalletPlugin` consumes the service.
        - It registers tools for agents to discover and use.
      - **Parameter Validation**
        - Zod schemas define and validate inputs for each tool.
      - **Execution Flow**
        - An agent calls a tool on the plugin.
        - The plugin delegates the call to the service.
        - The service calls the appropriate method on the core wallet client.
  - fileName: hedera-wallet-service.abs
    parentFile: plugin-integration.abs
    content: |-
      # Hedera Wallet Service

      ## 🎯 Purpose
      - To act as an intermediary between plugin tools and the core wallet client.

      ## ⚙️ How it Works
      - **Initialization**
        - The service is constructed with a `HederaWalletClient` instance.
      - **Method Mapping**
        - Each method in the service corresponds to a specific tool.
        - Example: `getHederaWalletBalance` calls `wallet.getBalanceOfAccount`.
        - This decouples the tool definition from the core client logic.
      - **Logic and Safety**
        - It passes parameters from the tool to the wallet client.
        - It adds logging and error handling for each operation.
        - It performs runtime checks for optional client methods before calling them.
  - fileName: hedera-wallet-plugin.abs
    parentFile: plugin-integration.abs
    content: |-
      # Hedera Wallet Plugin

      ## 🎯 Purpose
      - To register Hedera functionalities as discoverable SDK tools.

      ## ⚙️ How it Works
      - **Initialization**
        - The plugin is created with a `HederaWalletClient`.
        - It then creates a `<hedera-wallet-service.abs>` using this client.
      - **Public Tool Registration**
        - It always registers a set of public, read-only tools.
        - These include `getHederaWalletBalance` and `getHederaWalletAccountInfo`.
      - **Conditional Private Tools**
        - It uses the `canSign` utility from the `<factory.abs>`.
        - If `canSign` is true, it also registers private tools.
        - These include `transferHbar` and `transferToken`.
        - If `canSign` is false, these tools are not exposed.
