# Generated by Abstract Agent
# Timestamp: 2025-08-13T00:13:04.302Z
# ---

documentationLength: 19045
systemPrompt: >

  <context>

  ### Core Concept


  We are maintaining a tree of `.abs` files that explain an entire repository. This system of interconnected files
  serves as a hierarchical, easy-to-navigate technical documentation designed for quick comprehension.


  ### What are `.abs` Files?


  - **Purposeful Explanations**: An `.abs` file explains a specific module, component, or aspect of the codebase. It
  answers the question, "How does this part work?" in a concise and intuitive way.

  - **Audience**: They are written as if briefing a manager or a new team member who needs to quickly understand the
  system without getting lost in code-level details.

  - **Modular & Hierarchical**: The documentation is built from many small, focused `.abs` files.
    - It starts with a main `abstract-root.abs` file giving a high-level overview of the entire project.
    - This top-level file then links to other `.abs` files, each detailing a major component or concept.
    - These sub-files can, in turn, link to even more specific `.abs` files, forming a tree structure that allows users to drill down into details as needed.
  - **Interconnected**: A key feature is the use of inline links (e.g., `<sub_component.abs>`) to connect related `.abs`
  files, enabling easy navigation through the documentation tree.

  - **Condenses Children**: The `.abs` file should contain the most important information about the module, component,
  or aspect of the codebase. It is a condensed version of it's children, extracting the most important information.
    </context>

  <content_guide>


  **MAIN GUIDELINE**: file answers  "How does <x.abs> work?" in an INTUITIVE and EASY to understand way.


  ## üéØ Content Goals


  - **Answer "How it Works"**: The primary goal is to answer "How does this module work?" in an intuitive,
  easy-to-understand way.

  - **Audience Focus**: Write for a manager or a new team member. The content should enable a quick high-level grasp
  without reading source code.

  - **Focus on Orchestration**: When possible, use the "How it Works" section to explain how components work together to
  achieve the module's purpose. Describe their orchestrated flow, not just what each part does in isolation.


  </content_guide>


  <style_guide>

  Follow these guidelines when writing or editing an `.abs` file:


  ## üìè Style & Structure


  - **RUTHLESS CONCISENESS**: Each explanation should be **ruthlessly concise** ‚Äî focus on clarity and fast
  understanding. No fluff.

  - **Keep it Short**: Files should be small, ideally **5-15 lines**. Sentences should be short and to the point,
  ideally less than 10 words.

  - **Use Bullets**: Employ bullet points with nesting for hierarchy. Avoid long paragraphs. ALWASY split to multiple
  bullet points instead of a longer line.

  - **Use Bullet Point Titles**: Use main bulet points as titiles for a more detailed explanation in sub-bullets. Use
  **bold** for the bullet point titles.

  - **Use Sections**: Follow the structure defined in the `<sections>` guide.

  - **Logical Flow**: Use step-by-step logic where it helps clarify explanations.

  </style_guide>


  <sections>

  All `.abs` files must follow this structure:


  1.  **`# Module Name` (Heading)**

      - The file must start with a level-1 heading containing the module name.

  2.  **`## üéØ Purpose` (Mandatory Section)**

      - Always include this section.
      - Provide a single, concise sentence describing the module's main responsibility in an intuitive way.

  3.  **An Optional Content Section (Choose One)** - Choose one of the following sections.
     - **`## üë§ User Journey`** ‚Äì Use if the module is best explained through a user scenario or workflow.
      - **`## ‚öôÔ∏è How it Works`** - Use this if the module has a main flow or a conceptual logic. PREFER this over the Key Components section WHENEVER POSSIBLE.
      - **`## üß© Key Components`** - Use this ONLY if the module cannot be explained as a flow of steps. Only for modules that are a group of not directly related components that have no central flow or orchestration.



  </sections>



  <success_criteria>


  - File is concise:
    - 5-20 lines ideally
    - Each sentence should be less than 10 words
  - Clearly answers "How does <moduleName> work?"

  - Uses sections, bullet points, sub-bullets, subsub-bullets etc to create hierarchy and structure

  - Focuses on intuitive understanding over technical details

  </success_criteria>


  <linking_guide>

  After writing or editing the file content, you must add sub-file references to the file.


  **Add Sub-File References** following these patterns:


  - Use exact format `<filename.abs>`

  - Add inline after relevant bullet points at the highest appropriate level

  - **Each child file must be referenced at least once** in the directory file

  - Add references where they naturally fit the content flow

  - You can reference the same file multiple times if is relevant

  </linking_guide>


  <success_criteria>

  - **Includes sub-file references** in `<filename.abs>` format

  - **Each child file is referenced at least once**

  </success_criteria>


  <examples>

  ```abstract-root.abs

  # Project Overview: Abstract Language VS Code Extension


  ## üéØ Purpose


  - To provide a comprehensive VS Code editing experience for `.abs` files, enabling structured documentation and code
  navigation.


  ## üß© Key Components


  - **Abstract Language Core** <language-core.abs>
    - Provides fundamental support for `.abs` files.
      - Includes syntax recognition.
      - Offers basic language features.
  - **Code-Documentation Linking System** <linking-system.abs>
    - Enables and manages bidirectional links.
      - Connects Abstract specification files and corresponding source code implementations.
  - **AI-Powered Text Analysis** <ml-syntax-highlighting.abs>
    - Enhances Abstract documents with intelligent features.
      - Utilizes Large Language Models (LLMs) for sentence classification and highlighting.
  - **VS Code Extension Integration** <vscode-integration.abs>
    - Manages the extension's lifecycle and user interaction.
      - Handles user interface elements.
      - Manages configuration.
      - Oversees interaction with the VS Code environment.

  ```linking_system.abs

  # Code-Documentation Linking System


  ## üéØ Purpose

  - To establish and manage robust, bidirectional navigation between `.abs` files and source code, and also within
  `.abs` files.


  ## üß© Key Components

  - **Special Link Syntax Recognition** <link-decorator.abs>
      - Abstract Path Links: `<filename.abs>` for navigating to other Abstract files.
      - Implementation Tags: `@implements:filename.abs:section.subsection` (in code comments or `.abs` files) to link specific code to Abstract sections.
  - **Link Handling Modules** <link-decorator.abs>
    - Dedicated modules process the recognized link types.
  - **Navigation Command** <go_to_implementation.abs>
    - A core command (`abstract.extension.codeAndAbsLinking.goToImplementation`, typically `Ctrl+Shift+D`) triggers navigation.
  - **Range & Position Utilities** <range-utils.abs>
    - Helper functions parse section references (e.g., `1.a.ii`).
    - Map references to specific text ranges within files.

  ```go_to_implementation.abs

  # Go To Implementation Command


  ## üéØ Purpose

  - To provide the primary command for navigating between `.abs` files and their corresponding source code.


  ## ‚öôÔ∏è How it Works

  - **Activation**
    - Triggered by user command (e.g., keyboard shortcut).
  - **Context Detection**
    - Determines if the active editor is a code file or an Abstract (`.abs`) file.
  - **Navigation Logic** (based on context):
      - If in an Abstract file: Finds code implementing the current Abstract section. <abs-to-code.abs>
      - If in a code file: Finds the Abstract section referenced by an `@implements` tag near the cursor. <code-to-abs.abs>
  - **Result Handling**: <jump-to-implementation.abs>
      - If a single target is found, navigates directly.
      - If multiple targets are found (e.g., multiple code blocks implement one Abstract section):
          - Displays a Peek View or Quick Pick menu for user selection.
      - If no target is found, informs the user.

  etc...

  ```

  </examples>


  Generate a hierarchical documentation tree for the feature based on the feature documentation.

  Focus on technical implementation details and how the feature works. Focus on flows and implementation logic, less on
  architecture. Do not document utils that were already present in the codebase and were simplyused in this feature -
  assume user knows about them.

  Make sure each child adds significant details relative to the parent and doesnt simply repeat the parent - prefer
  bigger files than smaller files or replicated files.

  Use parentFile field to establish parent-child relationships.

  Create detail heavy files and dont create files that are less than 5 lines in the how it works section.

  The top file should be named "feature-root.abs" and should be a file that explains the feature in an intuitive and
  detailed way from a high level, and link to the main sub explanation files.


  Remember - each file should explain in an intuitive and detailed way its component works, and allow drilling down into
  more details using subfiles.
userPromptWithContext: >-
  Generate the abs files tree for the given feature based on the given documentation.

  Remember - each file should explain in an intuitive and detailed way its component works, and allow drilling down into
  more details using subfiles.


  Documentation on the feature:

  <feature_documentation>

  # Hedera Blockchain Wallet Support


  ## 1. Feature Overview


  This feature introduces comprehensive support for Hedera blockchain wallets within the Edwin SDK. Its primary purpose
  is to enable interaction with the Hedera network, allowing users and agents to perform operations such as querying
  HBAR and Hedera Token Service (HTS) token balances, retrieving account information, and executing HBAR and HTS token
  transfers. The implementation follows the existing modular architecture of the SDK, providing both read-only and
  full-capability (signing) wallet clients, integrated seamlessly through a plugin system.


  ## 2. High Level Flow of the Feature


  The Hedera wallet support is integrated into the Edwin SDK through two main layers: the `core/wallets` layer and the
  `plugins` layer.


  1.  **Wallet Creation**: A user or system component initiates the creation of a Hedera wallet client using a factory.
  This client can be either a read-only client (for public account queries) or a full-capability client (for signing
  transactions).

  2.  **Core Wallet Operations**: The created wallet client interacts directly with the Hedera network using the
  `@hashgraph/sdk`. It handles fundamental blockchain interactions like establishing a connection, querying account
  balances (HBAR and HTS tokens), retrieving account details, and signing/sending transactions.

  3.  **Plugin Integration**: A Hedera wallet plugin is instantiated with a wallet client. This plugin exposes a set of
  high-level tools (functions) that abstract the core wallet operations into a more user-friendly and agent-consumable
  format. These tools include functionalities for checking balances, getting account information, and performing
  transfers.

  4.  **Tool Execution**: When a plugin tool is invoked, it delegates the request to the underlying Hedera wallet
  service, which in turn uses the core wallet client to interact with the Hedera network. For signing-required
  operations (like transfers), the plugin ensures that a signing-capable wallet client is provided.


  ## 3. Detailed Flow of the Feature and Each Component


  ### 3.1. Core Wallet Classes (`src/core/wallets/hedera_wallet/`)


  This section defines the fundamental interfaces and classes for interacting with the Hedera network.


  **File Structure:**

  ```

  src/core/wallets/hedera_wallet/

  ‚îú‚îÄ‚îÄ index.ts              # Main exports for Hedera wallet components

  ‚îú‚îÄ‚îÄ client.ts             # HederaWalletClient interface definition

  ‚îú‚îÄ‚îÄ base_client.ts        # Abstract base class for common Hedera wallet functionality

  ‚îú‚îÄ‚îÄ factory.ts            # Factory for creating Hedera wallet instances

  ‚îî‚îÄ‚îÄ clients/
      ‚îú‚îÄ‚îÄ index.ts          # Exports for specific client implementations
      ‚îú‚îÄ‚îÄ keypair/
      ‚îÇ   ‚îî‚îÄ‚îÄ index.ts      # KeypairClient (private key wallet implementation)
      ‚îî‚îÄ‚îÄ publickey/
          ‚îî‚îÄ‚îÄ index.ts      # PublicKeyClient (read-only wallet implementation)
  ```


  **Components and Logic:**


  #### `src/core/wallets/hedera_wallet/client.ts`

  -   **Interface**: `HederaWalletClient`

  -   **Purpose**: Defines the contract for any Hedera wallet client in the SDK. It specifies the public methods that
  all Hedera wallet implementations must adhere to.

  -   **Key Methods Defined (Interface)**:
      -   `readonly accountId: AccountId`: The Hedera account ID associated with the wallet.
      -   `getClient(network?: string): Client`: Returns a configured Hedera SDK `Client` instance for a specified network (e.g., 'testnet', 'mainnet').
      -   `getAddress(): string`: Returns the wallet's account ID as a string.
      -   `getBalance(): Promise<number>`: Retrieves the HBAR balance of the current wallet.
      -   `getBalanceOfAccount(accountId: string): Promise<number>`: Retrieves the HBAR balance of any specified Hedera account.
      -   `getTokenBalance?(tokenId: string): Promise<number>`: (Optional) Retrieves the balance of a specific HTS token for the current wallet.
      -   `getTokenBalanceOfAccount?(accountId: string, tokenId: string): Promise<number>`: (Optional) Retrieves the balance of a specific HTS token for any specified account.
      -   `getAccountInfo(): Promise<unknown>`: Retrieves detailed information about the current wallet's account.
      -   `getAccountInfoForAccount?(accountId: string): Promise<unknown>`: (Optional) Retrieves detailed information about any specified Hedera account.
      -   `signTransaction(transaction: Transaction): Promise<Transaction>`: Signs a given Hedera transaction.
      -   `sendTransaction(transaction: Transaction): Promise<string>`: Sends a signed Hedera transaction to the network.
      -   `transferHbar(toAccountId: string, amount: number): Promise<string>`: Initiates an HBAR transfer.
      -   `transferToken(toAccountId: string, tokenId: string, amount: number): Promise<string>`: Initiates an HTS token transfer.

  #### `src/core/wallets/hedera_wallet/base_client.ts`

  -   **Class**: `BaseHederaWalletClient` (abstract)

  -   **Purpose**: Provides common, non-signing functionalities and shared logic for all Hedera wallet clients. It
  implements the read-only parts of `HederaWalletClient` and leaves signing-related methods abstract.

  -   **Key Methods Implemented**:
      -   `constructor(accountId: string | AccountId)`: Initializes the `accountId` property.
      -   `getAddress(): string`: Returns `this.accountId.toString()`.
      -   `getClient(network: string = 'testnet'): Client`: Creates and returns a Hedera SDK `Client` instance. It supports 'mainnet', 'testnet', and 'previewnet'. It also sets a `defaultMaxTransactionFee` of 2 HBAR (200,000,000 tinybars). Includes error handling for unsupported networks.
      -   `async getBalance(): Promise<number>`: Calls `this.getBalanceOfAccount(this.getAddress())`.
      -   `async getBalanceOfAccount(accountId: string): Promise<number>`: Fetches the HBAR balance of the given `accountId` using `AccountBalanceQuery`. Converts the balance from tinybars to HBAR (dividing by 100,000,000). Includes error logging.
      -   `async getTokenBalance(tokenId: string): Promise<number>`: Calls `this.getTokenBalanceOfAccount(this.getAddress(), tokenId)`.
      -   `async getTokenBalanceOfAccount(accountId: string, tokenId: string): Promise<number>`: Fetches the token balance for a specific `tokenId` on a given `accountId` using `AccountBalanceQuery`. Retrieves the token balance from the `balance.tokens` map and converts it to a number. Returns 0 if the token is not found or has no balance. Includes error logging.
      -   `async getAccountInfo(): Promise<unknown>`: Calls `this.getAccountInfoForAccount(this.getAddress())`.
      -   `async getAccountInfoForAccount(accountId: string): Promise<unknown>`: Fetches detailed account information for a given `accountId` using `AccountInfoQuery`. Returns a structured object containing `accountId`, `balance` (in HBAR), `key`, `expirationTime`, `autoRenewPeriod`, `isDeleted`, `memo`, and `ethereumNonce`. Includes error logging.
  -   **Abstract Methods (to be implemented by subclasses)**:
      -   `signTransaction(transaction: Transaction): Promise<Transaction>`
      -   `sendTransaction(transaction: Transaction): Promise<string>`
      -   `transferHbar(toAccountId: string, amount: number): Promise<string>`
      -   `transferToken(toAccountId: string, tokenId: string, amount: number): Promise<string>`

  #### `src/core/wallets/hedera_wallet/clients/keypair/index.ts`

  -   **Class**: `KeypairClient`

  -   **Purpose**: Implements a full-capability Hedera wallet client that can sign and send transactions using a private
  key.

  -   **Inheritance**: Extends `BaseHederaWalletClient`.

  -   **Key Methods Implemented**:
      -   `constructor(privateKey: string | PrivateKey, accountId?: string | AccountId)`: Initializes the `privateKey`. If `accountId` is not provided, it derives it from the public key associated with the `privateKey`.
      -   `getPrivateKey(): PrivateKey`: Returns the internal `PrivateKey` object.
      -   `async signTransaction(transaction: Transaction): Promise<Transaction>`: Signs the provided `transaction` using `this.privateKey`. Includes error handling.
      -   `async sendTransaction(transaction: Transaction): Promise<string>`: This is the core method for sending transactions. It first obtains a Hedera `Client` instance, then sets the client's operator using `client.setOperator(this.accountId, this.privateKey)`. It then executes the `transaction` (which will be automatically signed by the operator) and retrieves the transaction receipt. It validates that the transaction status is 'SUCCESS' and returns the `transactionId` as a string. Includes comprehensive error logging.
      -   `async transferHbar(toAccountId: string, amount: number): Promise<string>`: Constructs a `TransferTransaction` to send HBAR from the current account to `toAccountId`. It converts the `amount` from HBAR to tinybars. It then calls `this.sendTransaction` to execute the transfer. Includes error logging.
      -   `async transferToken(toAccountId: string, tokenId: string, amount: number): Promise<string>`: Constructs a `TransferTransaction` (note: `TransferTransaction` is used for both HBAR and HTS token transfers in Hedera SDK) to send HTS tokens from the current account to `toAccountId`. It specifies the `tokenId` and `amount`. It then calls `this.sendTransaction` to execute the transfer. Includes error logging.

  #### `src/core/wallets/hedera_wallet/clients/publickey/index.ts`

  -   **Class**: `PublicKeyClient`

  -   **Purpose**: Implements a read-only Hedera wallet client that can only perform queries and does not support
  signing or sending transactions.

  -   **Inheritance**: Extends `BaseHederaWalletClient`.

  -   **Key Methods Implemented**:
      -   `constructor(accountId: string | AccountId)`: Initializes the `accountId` property by calling the super constructor.
      -   `async signTransaction(_transaction: Transaction): Promise<Transaction>`: Throws an `Error` indicating that signing is not supported.
      -   `async sendTransaction(_transaction: Transaction): Promise<string>`: Throws an `Error` indicating that sending transactions is not supported.
      -   `async transferHbar(_toAccountId: string, _amount: number): Promise<string>`: Throws an `Error` indicating that HBAR transfers are not supported.
      -   `async transferToken(_toAccountId: string, _tokenId: string, _amount: number): Promise<string>`: Throws an `Error` indicating that token transfers are not supported.

  #### `src/core/wallets/hedera_wallet/factory.ts`

  -   **Object**: `HederaWalletFactory`

  -   **Purpose**: Provides static factory methods to create instances of `KeypairClient` and `PublicKeyClient`.

  -   **Key Methods**:
      -   `fromPrivateKey(privateKey: string | PrivateKey, accountId?: string | AccountId): KeypairClient`: Creates a `KeypairClient` instance. If `accountId` is not provided, it's derived from the private key.
      -   `fromAccountId(accountId: string | AccountId): PublicKeyClient`: Creates a `PublicKeyClient` instance.
  -   **Function**: `canSign(client: HederaWalletClient): boolean`
      -   **Purpose**: A type guard function to determine if a given `HederaWalletClient` instance supports signing operations. It returns `true` if the client is not an instance of `PublicKeyClient`.

  #### `src/core/wallets/hedera_wallet/index.ts`

  -   **Purpose**: Serves as the main entry point for exporting all core Hedera wallet components, including interfaces,
  base classes, client implementations, and the factory.


  ### 3.2. Plugin Implementation (`src/plugins/hedera_wallet/`)


  This section describes how the core Hedera wallet functionality is exposed as Edwin SDK plugins and tools.


  **File Structure:**

  ```

  src/plugins/hedera_wallet/

  ‚îú‚îÄ‚îÄ index.ts              # Plugin exports

  ‚îú‚îÄ‚îÄ hederaWalletPlugin.ts # Main plugin class

  ‚îú‚îÄ‚îÄ hederaWalletService.ts# Service implementation that uses core wallet clients

  ‚îî‚îÄ‚îÄ parameters.ts         # Zod schemas and types for plugin tool parameters

  ```


  **Components and Logic:**


  #### `src/plugins/hedera_wallet/parameters.ts`

  -   **Purpose**: Defines Zod schemas for validating input parameters for each Hedera wallet plugin tool. This ensures
  type safety and robust input validation.

  -   **Key Schemas and Types**:
      -   `HederaWalletBalanceParametersSchema` / `HederaWalletBalanceParameters`: For getting HBAR balance of any account.
      -   `CurrentHederaWalletBalanceParametersSchema` / `CurrentHederaWalletBalanceParameters`: For getting HBAR balance of the current wallet (no parameters).
      -   `HederaWalletTokenBalanceParametersSchema` / `HederaWalletTokenBalanceParameters`: For getting token balance of any account for a specific token.
      -   `CurrentHederaWalletTokenBalanceParametersSchema` / `CurrentHederaWalletTokenBalanceParameters`: For getting token balance of the current wallet for a specific token.
      -   `HederaWalletAccountInfoParametersSchema` / `HederaWalletAccountInfoParameters`: For getting account information of any account.
      -   `CurrentHederaWalletAccountInfoParametersSchema` / `CurrentHederaWalletAccountInfoParameters`: For getting account information of the current wallet (no parameters).
      -   `HederaWalletTransferHbarParametersSchema` / `HederaWalletTransferHbarParameters`: For transferring HBAR (recipient account ID and amount).
      -   `HederaWalletTransferTokenParametersSchema` / `HederaWalletTransferTokenParameters`: For transferring HTS tokens (recipient account ID, token ID, and amount).

  #### `src/plugins/hedera_wallet/hederaWalletService.ts`

  -   **Class**: `HederaWalletService`

  -   **Purpose**: Acts as an intermediary between the plugin tools and the core Hedera wallet client. It encapsulates
  the business logic for each tool, delegating to the appropriate methods of the `HederaWalletClient`.

  -   **Inheritance**: Extends `EdwinService`.

  -   **Key Methods Implemented**:
      -   `constructor(private wallet: HederaWalletClient)`: Initializes the service with a `HederaWalletClient` instance.
      -   `async getHederaWalletBalance(params: HederaWalletBalanceParameters): Promise<number>`: Calls `this.wallet.getBalanceOfAccount(params.accountId)`.
      -   `async getCurrentHederaWalletBalance(): Promise<number>`: Calls `this.wallet.getBalance()`.
      -   `async getHederaWalletTokenBalance(params: HederaWalletTokenBalanceParameters): Promise<number>`: Calls `this.wallet.getTokenBalanceOfAccount(params.accountId, params.tokenId)`. Includes a runtime check to ensure `getTokenBalanceOfAccount` is supported by the underlying wallet client, throwing an error if not.
      -   `async getCurrentHederaWalletTokenBalance(tokenId: string): Promise<number>`: Calls `this.wallet.getTokenBalance!(tokenId)`. Includes a runtime check to ensure `getTokenBalance` is supported.
      -   `async getHederaWalletAccountInfo(params: HederaWalletAccountInfoParameters): Promise<unknown>`: Calls `this.wallet.getAccountInfoForAccount(params.accountId)`. Includes a runtime check for `getAccountInfoForAccount` support.
      -   `async getCurrentHederaWalletAccountInfo(): Promise<unknown>`: Calls `this.wallet.getAccountInfo()`.
      -   `async transferHbar(params: HederaWalletTransferHbarParameters): Promise<string>`: Calls `this.wallet.transferHbar(params.toAccountId, params.amount)`.
      -   `async transferToken(params: HederaWalletTransferTokenParameters): Promise<string>`: Calls `this.wallet.transferToken(params.toAccountId, params.tokenId, params.amount)`.
      -   All methods include `edwinLogger.info` for logging and robust `try-catch` blocks for error handling.

  #### `src/plugins/hedera_wallet/hederaWalletPlugin.ts`

  -   **Class**: `HederaWalletPlugin`

  -   **Purpose**: The main plugin class that registers and exposes the Hedera wallet functionalities as Edwin tools. It
  categorizes tools into public (read-only) and private (signing-required) based on the capabilities of the provided
  wallet client.

  -   **Inheritance**: Extends `EdwinPlugin`.

  -   **Key Methods Implemented**:
      -   `constructor(private wallet: HederaWalletClient)`: Initializes the plugin with a name ('hedera_wallet') and an instance of `HederaWalletService`.
      -   `getTools(): Record<string, EdwinTool>`: Combines and returns both public and private tools.
      -   `getPublicTools(): Record<string, EdwinTool>`: Returns a map of public tools:
          -   `getHederaWalletBalance`
          -   `getCurrentHederaWalletBalance`
          -   `getHederaWalletTokenBalance`
          -   `getCurrentHederaWalletTokenBalance`
          -   `getHederaWalletAccountInfo`
          -   `getCurrentHederaWalletAccountInfo`
          Each tool is defined with a `name`, `description`, `schema` (from `parameters.ts`), and an `execute` function that calls the corresponding method in `HederaWalletService`.
      -   `getPrivateTools(): Record<string, EdwinTool>`: Returns a map of private tools. These tools are only included if the `this.wallet` instance `canSign` (checked using the `canSign` utility from `core/wallets/hedera_wallet/factory.ts`).
          -   `transferHbar`
          -   `transferToken`
          Similar to public tools, each is defined with `name`, `description`, `schema`, and `execute` function.
      -   `supportsChain = (chain: Chain) => chain.type === 'hedera'`: A property indicating that this plugin supports the 'hedera' chain type.
  -   **Factory Function**: `export const hederaWallet = (wallet: HederaWalletClient) => new
  HederaWalletPlugin(wallet);` provides a convenient way to create plugin instances.


  #### `src/plugins/hedera_wallet/index.ts`

  -   **Purpose**: Serves as the main entry point for exporting all Hedera wallet plugin components.


  ### 3.3. Chain Type Integration (`src/core/types/chain.ts`)


  -   **Purpose**: Extends the existing chain type definitions to include Hedera.

  -   **Changes**: 
      -   `export type Chain = EvmChain | SolanaChain | HederaChain;` (added `HederaChain` to the union type).
      -   `export type HederaChain = { type: 'hedera'; };` (defined the new `HederaChain` type).
      -   `export type SupportedChain = SupportedEVMChain | 'solana' | 'hedera';` (added 'hedera' to the `SupportedChain` union type).

  ### 3.4. Dependencies


  -   The `@hashgraph/sdk` package (version `^2.70.0`) was added to the `dependencies` section of `package.json`.


  ### 3.5. Testing


  -   **Test File**: `tests/hedera_wallet.test.ts`

  -   **Framework**: Uses `vitest` for testing.

  -   **Environment Variables**: Tests are conditionally run based on the presence of `HEDERA_PRIVATE_KEY` and
  `HEDERA_ACCOUNT_ID` environment variables, allowing for both unit/mocked tests and real network integration tests.

  -   **Test Suites**: The test file is structured into several `describe` blocks:
      -   `Hedera Wallet Core Functionality Tests`:
          -   `Factory Tests`: Verifies correct instantiation of `PublicKeyClient` and `KeypairClient` from account IDs and private keys, and validates input parameters.
          -   `PublicKeyClient Tests`: Confirms `getAddress()` works and verifies that signing/sending/transfer methods throw errors as expected for a read-only client. Also checks that implemented methods (like `getBalance()`, `getAccountInfo()`) do not throw 
  </feature_documentation>


  Generate a complete hierarchical documentation tree for this feature based on the documentation
timestamp: "2025-08-13T00:13:04.302Z"
